import{_ as i,c as l,a2 as s,o as e}from"./chunks/framework.YPpNXepj.js";const c=JSON.parse('{"title":"计算机基础","description":"","frontmatter":{},"headers":[],"relativePath":"docs/first-exam/ComputerBase.md","filePath":"docs/first-exam/ComputerBase.md"}'),t={name:"docs/first-exam/ComputerBase.md"};function n(r,a,h,o,p,d){return e(),l("div",null,a[0]||(a[0]=[s(`<h1 id="计算机基础" tabindex="-1">计算机基础 <a class="header-anchor" href="#计算机基础" aria-label="Permalink to &quot;计算机基础&quot;">​</a></h1><p>计算机基础在校招中考核较为常见，尤其是大厂，不可忽视。</p><h2 id="进程和线程的区别" tabindex="-1">进程和线程的区别 <a class="header-anchor" href="#进程和线程的区别" aria-label="Permalink to &quot;进程和线程的区别&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p><strong>进程</strong>是操作系统中一个正在运行的程序，每个进程都有自己的地址空间、内存、文件描述符等资源。</p><p><strong>线程</strong>是进程中的一个执行单元，是 cpu 调度的最小单元，共享进程的资源，但有自己的独立执行流。</p><p>二者的区别</p><ul><li>进程拥有独立的堆栈空间和数据段，需要分配独立的地址空间，开销大</li><li>线程开销小，切换快，没进程安全，从通信机制上看，线程可以共享数据段</li></ul><p>举例</p><ul><li>浏览器中一个 tab 就是一个进程，进程中某个线程崩了，整个进程就会崩，但是这不会影响其他的进程，因此进程之间相对独立</li><li>Nginx 或 Nodejs PM2 开启的多个 instance 是进程，每个 instance 之间不能共享内存数据</li><li>JS 中 WebWorker 是一个线程，它可以和和主线程共享内存数据，独立运行不阻塞 UI</li></ul></details><h2 id="进程间的通信" tabindex="-1">进程间的通信 <a class="header-anchor" href="#进程间的通信" aria-label="Permalink to &quot;进程间的通信&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>进程间通信（Inter-Process Communication，IPC）是指在操作系统中，不同进程之间交换信息和数据的过程，常见的进程通信方式包括：</p><ul><li>管道：用于单向或双向通信</li><li>消息队列：允许进程通过信息传递进行通信</li><li>共享内存：多个进程可以访问同一块内存区域</li><li>信号量：用于进程间的同步</li><li>套接字：用于网络通信</li></ul><p>线程间通信与进程间通信类似，但由于线程之间共享进程的资源，线程间通信通常比进程间通信更高效</p></details><h2 id="单核-cpu-如何实现并发" tabindex="-1">单核 CPU 如何实现并发 <a class="header-anchor" href="#单核-cpu-如何实现并发" aria-label="Permalink to &quot;单核 CPU 如何实现并发&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>单核CPU 主要是通过时间片轮转和上下文切换来实现并发</p><p>时间片轮转</p><ul><li>CPU将时间划分为很小的时间片，通常是几十毫秒</li><li>每个进程、线程分配到一个时间片</li><li>CPU轮流执行每个进程、线程的时间片</li><li>当一个时间片用完，CPU就会切换到下一个进程、线程</li></ul><p>上下文切换</p><ul><li>在切换进程、线程时，CPU需要保存当前进程的状态（下上文），包括 <ul><li>程序计数器的值</li><li>寄存器的值</li><li>内存映射信息</li></ul></li><li>加载下一个要执行的进程、线程的上下文</li></ul><blockquote><p>在任意时刻，CPU执行执行一个任务，由于切换速度非常快，给用户的感觉就像是在同时运行多个程序，所以这种机制被称为“伪并发”，若线程过多也不好，频繁的上下文切换会带来一定的性能开销，所以过多的线程反而会带来性能下降的问题</p></blockquote></details><h2 id="cpu-调度算法有哪些" tabindex="-1">CPU 调度算法有哪些？ <a class="header-anchor" href="#cpu-调度算法有哪些" aria-label="Permalink to &quot;CPU 调度算法有哪些？&quot;">​</a></h2><h2 id="linux-如何查找你的进程占用的那个端口" tabindex="-1">linux 如何查找你的进程占用的那个端口 <a class="header-anchor" href="#linux-如何查找你的进程占用的那个端口" aria-label="Permalink to &quot;linux 如何查找你的进程占用的那个端口&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>使用 netstat 命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有端口占用情况</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">netstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -tunlp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看特定端口，比如 8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">netstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -tunlp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span></code></pre></div><ul><li>t - tcp 协议；u - udp 协议；n - 显示端口号；l - 仅显示监听端口；p - 显示进程信息</li></ul><p>使用 lsof 命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看特定端口，比如 8080</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lsof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :8080</span></span></code></pre></div><ul><li>i - 显示网络连接</li></ul></details><h2 id="单核服务器连接数超载了怎么办" tabindex="-1">单核服务器连接数超载了怎么办 <a class="header-anchor" href="#单核服务器连接数超载了怎么办" aria-label="Permalink to &quot;单核服务器连接数超载了怎么办&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><ul><li><p>优化代码和查询</p><p>确保应用程序代码和数据库查询是高效的，以减少每个连接的资源消耗</p></li><li><p>使用负载均衡</p><p>将流量分配到多个服务器上，以分散负载</p></li><li><p>增加连接池</p><p>使用连接池来管理数据库连接，减少连接的创建和销毁开销</p></li><li><p>限制连接数</p><p>配置服务器以限制每个客户端的最大连接数，以防止单个客户端占用过多资源</p></li><li><p>使用缓存</p><p>利用缓存机制（如 Redis，Memcached）来减少对数据库的访问次数</p></li></ul></details><h2 id="请简述一个编译器的执行过程。前端有哪些常见的编译工具" tabindex="-1">请简述一个编译器的执行过程。前端有哪些常见的编译工具？ <a class="header-anchor" href="#请简述一个编译器的执行过程。前端有哪些常见的编译工具" aria-label="Permalink to &quot;请简述一个编译器的执行过程。前端有哪些常见的编译工具？&quot;">​</a></h2><h2 id="什么是解释性语言和编译性语言-他们有什么区别" tabindex="-1">什么是解释性语言和编译性语言，他们有什么区别？ <a class="header-anchor" href="#什么是解释性语言和编译性语言-他们有什么区别" aria-label="Permalink to &quot;什么是解释性语言和编译性语言，他们有什么区别？&quot;">​</a></h2><h2 id="简述-js-垃圾回收的过程。用什么算法" tabindex="-1">简述 JS 垃圾回收的过程。用什么算法？ <a class="header-anchor" href="#简述-js-垃圾回收的过程。用什么算法" aria-label="Permalink to &quot;简述 JS 垃圾回收的过程。用什么算法？&quot;">​</a></h2><h2 id="什么是内存泄漏-如何排查-js-内存泄漏的常见原因" tabindex="-1">什么是内存泄漏？如何排查？JS 内存泄漏的常见原因？ <a class="header-anchor" href="#什么是内存泄漏-如何排查-js-内存泄漏的常见原因" aria-label="Permalink to &quot;什么是内存泄漏？如何排查？JS 内存泄漏的常见原因？&quot;">​</a></h2><h2 id="简述-js-运行时的堆栈内存模型" tabindex="-1">简述 JS 运行时的堆栈内存模型？ <a class="header-anchor" href="#简述-js-运行时的堆栈内存模型" aria-label="Permalink to &quot;简述 JS 运行时的堆栈内存模型？&quot;">​</a></h2><p>画图表示</p><h2 id="冯诺依曼架构是什么" tabindex="-1">冯诺依曼架构是什么？？ <a class="header-anchor" href="#冯诺依曼架构是什么" aria-label="Permalink to &quot;冯诺依曼架构是什么？？&quot;">​</a></h2><h2 id="计算机内部为何使用二进制" tabindex="-1">计算机内部为何使用二进制？ <a class="header-anchor" href="#计算机内部为何使用二进制" aria-label="Permalink to &quot;计算机内部为何使用二进制？&quot;">​</a></h2><h2 id="二进制如何表示负数和小数" tabindex="-1">二进制如何表示负数和小数？ <a class="header-anchor" href="#二进制如何表示负数和小数" aria-label="Permalink to &quot;二进制如何表示负数和小数？&quot;">​</a></h2><h2 id="什么是虚拟内存-为何要使用虚拟内存" tabindex="-1">什么是虚拟内存，为何要使用虚拟内存？ <a class="header-anchor" href="#什么是虚拟内存-为何要使用虚拟内存" aria-label="Permalink to &quot;什么是虚拟内存，为何要使用虚拟内存？&quot;">​</a></h2><h2 id="什么是-unicode-编码-它和常见的-utf-8-有什么关系" tabindex="-1">什么是 Unicode 编码？它和常见的 UTF-8 有什么关系？ <a class="header-anchor" href="#什么是-unicode-编码-它和常见的-utf-8-有什么关系" aria-label="Permalink to &quot;什么是 Unicode 编码？它和常见的 UTF-8 有什么关系？&quot;">​</a></h2><p>顺便提到 ASCII GBK 编码</p><h2 id="简述计算机网络的-osi-模型" tabindex="-1">简述计算机网络的 OSI 模型 <a class="header-anchor" href="#简述计算机网络的-osi-模型" aria-label="Permalink to &quot;简述计算机网络的 OSI 模型&quot;">​</a></h2><h2 id="udp-和-tcp-协议的区别-有什么应用场景" tabindex="-1">UDP 和 TCP 协议的区别？有什么应用场景 <a class="header-anchor" href="#udp-和-tcp-协议的区别-有什么应用场景" aria-label="Permalink to &quot;UDP 和 TCP 协议的区别？有什么应用场景&quot;">​</a></h2><h2 id="数组和链表有什么区别-从内存结构上来说" tabindex="-1">数组和链表有什么区别？从内存结构上来说 <a class="header-anchor" href="#数组和链表有什么区别-从内存结构上来说" aria-label="Permalink to &quot;数组和链表有什么区别？从内存结构上来说&quot;">​</a></h2>`,33)]))}const k=i(t,[["render",n]]);export{c as __pageData,k as default};
