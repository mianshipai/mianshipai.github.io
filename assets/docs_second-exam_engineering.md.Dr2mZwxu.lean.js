import{_ as i,c as a,a2 as e,o as n}from"./chunks/framework.YPpNXepj.js";const c=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[],"relativePath":"docs/second-exam/engineering.md","filePath":"docs/second-exam/engineering.md"}'),t={name:"docs/second-exam/engineering.md"};function l(p,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h1><p>前端工程化通过自动化工具和标准化流程，提升开发效率、代码质量和可维护性。其核心目标是优化开发、构建、测试和部署流程，减少人工干预和重复劳动，便于项目扩展和团队协作。常见的工具，如Vite和Webpack，提供高效的构建和打包能力，显著提升开发效率并丰富前端生态。这些工具的广泛应用使前端开发更加高效，且成为近年来面试中的热门话题。</p><h2 id="vite为什么更快" tabindex="-1">Vite为什么更快？ <a class="header-anchor" href="#vite为什么更快" aria-label="Permalink to &quot;Vite为什么更快？&quot;">​</a></h2><h2 id="vite中如何使用环境变量" tabindex="-1">vite中如何使用环境变量？ <a class="header-anchor" href="#vite中如何使用环境变量" aria-label="Permalink to &quot;vite中如何使用环境变量？&quot;">​</a></h2><details class="details custom-block"><summary>参考答案</summary><p>根据当前的代码环境变化的变量就叫做<strong>环境变量</strong>。比如，在生产环境和开发环境将BASE_URL设置成不同的值，用来请求不同的环境的接口。</p><p>Vite内置了 <code>dotenv</code> 这个第三方库， dotenv会自动读取 <code>.env</code> 文件， dotenv 从你的 <code>环境目录</code> 中的下列文件加载额外的环境变量：</p><blockquote><p>.env # 所有情况下都会加载 .env.[mode] # 只在指定模式下加载</p></blockquote><p>默认情况下</p><ul><li><code>npm run dev</code> 会加载 <code>.env</code> 和 <code>.env.development</code> 内的配置</li><li><code>npm run build</code> 会加载 <code>.env</code> 和 <code>.env.production</code> 内的配置</li><li><code>mode</code> 可以通过命令行 <code>--mode</code> 选项来重写。 环境变量需以 VITE_ 前缀定义，且通过 <code>import.meta.env</code> 访问。</li></ul><p>示例： .env.development：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VITE_API_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://localhost:3000&#39;</span></span></code></pre></div><p>在代码中使用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VITE_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http://localhost:3000</span></span></code></pre></div><blockquote><p>参考博文：<a href="https://juejin.cn/post/7172012247852515335" target="_blank" rel="noreferrer">vite中环境变量的使用与配置</a></p></blockquote></details><h2 id="vite如何实现根据不同环境-qa、dev、prod-加载不同的配置文件" tabindex="-1">vite如何实现根据不同环境(qa、dev、prod)加载不同的配置文件？ <a class="header-anchor" href="#vite如何实现根据不同环境-qa、dev、prod-加载不同的配置文件" aria-label="Permalink to &quot;vite如何实现根据不同环境(qa、dev、prod)加载不同的配置文件？&quot;">​</a></h2><details class="details custom-block"><summary>参考答案</summary><p>在 Vite 中，根据不同环境设置不同配置的方式，类似于 Webpack 时代的配置方法，但更加简化。Vite 使用 <code>defineConfig</code> 函数，通过判断 <code>command</code> 和 <code>mode</code> 来加载不同的配置。</p><ul><li><strong>通过 <code>defineConfig</code> 动态配置：</strong></li></ul><p>Vite 提供的 <code>defineConfig</code> 函数可以根据 <code>command</code> 来区分开发环境（ <code>serve</code> ）和生产环境（ <code>build</code> ），并返回不同的配置。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viteBaseConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./vite.base.config&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viteDevConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./vite.dev.config&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viteProdConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./vite.prod.config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ssrBuild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (command </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;serve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 开发环境独有配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viteBaseConfig,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viteDevConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 生产环境独有配置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viteBaseConfig,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viteProdConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li><strong>创建不同的配置文件</strong></li></ul><p><code>vite.base.config.ts</code> ：基础配置，适用于所有环境。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    defineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 基础配置-&gt;使用所有场景</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><code>vite.dev.config.ts</code> ：开发环境配置。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 开发环境专有配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>vite.prod.config.ts</code> ：生产环境配置。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 生产环境专有配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p>参考博文：<a href="https://juejin.cn/post/7172009616967942175" target="_blank" rel="noreferrer">vite指定配置文件及其在多环境下的配置集成方案</a></p></blockquote></details><h2 id="简述vite的依赖预加载机制。" tabindex="-1">简述Vite的依赖预加载机制。 <a class="header-anchor" href="#简述vite的依赖预加载机制。" aria-label="Permalink to &quot;简述Vite的依赖预加载机制。&quot;">​</a></h2><h2 id="vite中如何加载、处理静态资源" tabindex="-1">vite中如何加载、处理静态资源？ <a class="header-anchor" href="#vite中如何加载、处理静态资源" aria-label="Permalink to &quot;vite中如何加载、处理静态资源？&quot;">​</a></h2><details class="details custom-block"><summary>参考答案</summary><p>🎯 <strong>静态资源目录（public 目录）</strong>：</p><ul><li>静态资源可以放在 <code>public</code> 目录下，这些文件不会经过构建处理，直接按原样复制到输出目录。在开发时可以通过 <code>/</code> 路径直接访问，如 <code>/icon.png</code>。</li><li><code>public</code> 目录可通过 <code>vite.config.js</code> 中的 <code>publicDir</code> 配置项修改。</li></ul><p>🎯 <strong>资源引入</strong>：</p><ul><li><strong>图片、字体、视频</strong>：通过 <code>import</code> 引入，Vite 会自动将其处理为 URL 并生成带哈希值的文件名。在开发时，引用会是根路径（如 <code>/img.png</code>），在生产构建后会是如 <code>/assets/img.2d8efhg.png</code> 的路径。</li><li><strong>CSS、JS</strong>：CSS 会被自动注入到页面中，JS 按模块处理。</li></ul><p>🎯 <strong>强制作为 URL 引入</strong>：通过 <code>?url</code> 后缀可以显式强制将某些资源作为 URL 引入。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./img.png?url&#39;</span></span></code></pre></div><p>🎯 <strong>强制作为原始内容引入</strong>：通过 <code>?raw</code> 后缀将文件内容作为字符串引入。</p><p>🎯 <code>new URL()</code> ：通过 <code>import.meta.url</code> 可以动态构建资源的 URL，这对于一些动态路径很有用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imgUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./img.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url).href</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hero-img&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgUrl</span></span></code></pre></div><blockquote><p>参考博文：<a href="https://juejin.cn/post/7173467405522305055" target="_blank" rel="noreferrer">vite中静态资源（css、img、svg等）的加载机制及其相关配</a></p></blockquote></details><h2 id="如何在vite项目中引入css预处理器" tabindex="-1">如何在Vite项目中引入CSS预处理器? <a class="header-anchor" href="#如何在vite项目中引入css预处理器" aria-label="Permalink to &quot;如何在Vite项目中引入CSS预处理器?&quot;">​</a></h2><h2 id="vite中可做的项目优化有哪些" tabindex="-1">vite中可做的项目优化有哪些？ <a class="header-anchor" href="#vite中可做的项目优化有哪些" aria-label="Permalink to &quot;vite中可做的项目优化有哪些？&quot;">​</a></h2><h2 id="简述vite插件开发流程" tabindex="-1">简述vite插件开发流程？ <a class="header-anchor" href="#简述vite插件开发流程" aria-label="Permalink to &quot;简述vite插件开发流程？&quot;">​</a></h2><h2 id="如何在vite中配置代理" tabindex="-1">如何在Vite中配置代理？ <a class="header-anchor" href="#如何在vite中配置代理" aria-label="Permalink to &quot;如何在Vite中配置代理？&quot;">​</a></h2><h2 id="vite如何集成typescript-如何配置" tabindex="-1">Vite如何集成TypeScript？如何配置？ <a class="header-anchor" href="#vite如何集成typescript-如何配置" aria-label="Permalink to &quot;Vite如何集成TypeScript？如何配置？&quot;">​</a></h2><h2 id="什么是-webpack-它的作用是什么" tabindex="-1">什么是 Webpack？它的作用是什么？ <a class="header-anchor" href="#什么是-webpack-它的作用是什么" aria-label="Permalink to &quot;什么是 Webpack？它的作用是什么？&quot;">​</a></h2><h2 id="如何使用-webpack-配置多环境的不同构建配置" tabindex="-1">如何使用 Webpack 配置多环境的不同构建配置？ <a class="header-anchor" href="#如何使用-webpack-配置多环境的不同构建配置" aria-label="Permalink to &quot;如何使用 Webpack 配置多环境的不同构建配置？&quot;">​</a></h2><h2 id="webpack-的核心概念有哪些-请简单解释。" tabindex="-1">Webpack 的核心概念有哪些？请简单解释。 <a class="header-anchor" href="#webpack-的核心概念有哪些-请简单解释。" aria-label="Permalink to &quot;Webpack 的核心概念有哪些？请简单解释。&quot;">​</a></h2><h2 id="如何在-webpack-中实现-css-和-sass-的处理" tabindex="-1">如何在 Webpack 中实现 CSS 和 Sass 的处理？ <a class="header-anchor" href="#如何在-webpack-中实现-css-和-sass-的处理" aria-label="Permalink to &quot;如何在 Webpack 中实现 CSS 和 Sass 的处理？&quot;">​</a></h2><h2 id="webpack-中的入口和出口是什么" tabindex="-1">Webpack 中的入口和出口是什么？ <a class="header-anchor" href="#webpack-中的入口和出口是什么" aria-label="Permalink to &quot;Webpack 中的入口和出口是什么？&quot;">​</a></h2><h2 id="webpack-中的-loaders-和-plugins-有什么区别" tabindex="-1">Webpack 中的 Loaders 和 Plugins 有什么区别 <a class="header-anchor" href="#webpack-中的-loaders-和-plugins-有什么区别" aria-label="Permalink to &quot;Webpack 中的 Loaders 和 Plugins 有什么区别&quot;">​</a></h2><h2 id="webpack中-如何实现按需加载" tabindex="-1">Webpack中, 如何实现按需加载？ <a class="header-anchor" href="#webpack中-如何实现按需加载" aria-label="Permalink to &quot;Webpack中, 如何实现按需加载？&quot;">​</a></h2><h2 id="什么是-tree-shaking-如何在-webpack-中启用它" tabindex="-1">什么是 Tree Shaking？如何在 Webpack 中启用它？ <a class="header-anchor" href="#什么是-tree-shaking-如何在-webpack-中启用它" aria-label="Permalink to &quot;什么是 Tree Shaking？如何在 Webpack 中启用它？&quot;">​</a></h2>`,23)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
