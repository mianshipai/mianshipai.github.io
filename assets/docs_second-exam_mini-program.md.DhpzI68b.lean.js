import{_ as l,c as h,a2 as t,j as s,a,t as p,o as k}from"./chunks/framework.YPpNXepj.js";const e="/assets/wxyl.CXWdTkKS.png",r="/assets/api-login.BGdrurUY.jpg",B=JSON.parse('{"title":"小程序","description":"","frontmatter":{},"headers":[],"relativePath":"docs/second-exam/mini-program.md","filePath":"docs/second-exam/mini-program.md"}'),d={name:"docs/second-exam/mini-program.md"},g={class:"details custom-block"},E={tabindex:"0"};function o(n,i,y,c,F,u){return k(),h("div",null,[i[12]||(i[12]=t('<h1 id="小程序" tabindex="-1">小程序 <a class="header-anchor" href="#小程序" aria-label="Permalink to &quot;小程序&quot;">​</a></h1><h2 id="小程序双线程架构" tabindex="-1">小程序双线程架构 <a class="header-anchor" href="#小程序双线程架构" aria-label="Permalink to &quot;小程序双线程架构&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p><strong>1. 架构组成</strong></p><p><strong>（1）逻辑层（Service）</strong></p><ul><li><strong>运行环境</strong>：独立的 JavaScript 线程（如 JavaScriptCore 或 V8 引擎）。</li><li><strong>职责</strong>： <ul><li>处理业务逻辑（数据请求、事件响应、状态管理）。</li><li>调用小程序 API（如网络请求、本地存储）。</li><li>通过 <code>setData</code> 向渲染层传递数据。</li></ul></li><li><strong>特点</strong>： <ul><li><strong>无法直接操作 DOM</strong>：与渲染层隔离，避免恶意脚本攻击。</li><li><strong>单例运行</strong>：全局状态统一管理（如 App 和 Page 对象）。</li></ul></li></ul><p><strong>（2）渲染层（View）</strong></p><ul><li><strong>运行环境</strong>：WebView 线程（每个页面独立实例）。</li><li><strong>职责</strong>： <ul><li>解析 WXML/WXSS，渲染页面结构。</li><li>处理用户交互事件（点击、滑动），触发逻辑层响应。</li></ul></li><li><strong>特点</strong>： <ul><li><strong>数据驱动更新</strong>：根据逻辑层传递的数据动态渲染。</li><li><strong>轻量化</strong>：不执行复杂逻辑，保障渲染流畅性。</li></ul></li></ul><p><strong>（3）系统层（Native）</strong></p><ul><li><strong>作用</strong>：作为逻辑层与渲染层的通信桥梁，提供原生能力支持。</li><li><strong>核心功能</strong>： <ul><li><strong>JSBridge</strong>：序列化传递数据（JSON 格式）。</li><li><strong>安全管控</strong>：拦截非法操作（如直接访问 DOM）。</li><li><strong>原生 API</strong>：调用摄像头、地理位置等硬件功能。</li></ul></li></ul><p><img src="'+e+`" alt="wxyl"></p></details><h2 id="直接修改-this-data-为何不会触发视图更新" tabindex="-1">直接修改 this.data 为何不会触发视图更新？ <a class="header-anchor" href="#直接修改-this-data-为何不会触发视图更新" aria-label="Permalink to &quot;直接修改 this.data 为何不会触发视图更新？&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>小程序中直接修改 <code>this.data</code> 不会触发视图更新的原因如下：</p><p><strong>1. 数据更新机制的设计</strong></p><p>小程序采用 <strong>显式更新</strong> 策略，只有通过 <code>this.setData()</code> 方法修改数据时，才会触发以下流程：</p><ul><li><strong>数据变更通知</strong>：将修改的数据标记为“脏数据”（需更新）。</li><li><strong>通信到渲染层</strong>：通过 JSBridge 将数据序列化后传递到 WebView 线程。</li><li><strong>视图差异化更新</strong>：渲染层对比新旧数据差异，仅更新变化的 DOM 节点。</li></ul><p>直接修改 <code>this.data</code> 仅改变逻辑层的数据，但 <strong>未触发上述流程</strong>，因此渲染层无法感知数据变化。</p><p><strong>2. 双线程架构的限制</strong></p><p>小程序的逻辑层（Service）与渲染层（View）运行在独立线程中：</p><ul><li><strong>逻辑层</strong>：通过 JavaScriptCore 或 V8 引擎运行。</li><li><strong>渲染层</strong>：在 WebView 中解析 WXML/WXSS。</li></ul><p>两者通过 <strong>异步通信</strong>（JSBridge）传递数据。</p><p>直接修改 <code>this.data</code> 不会触发系统层的数据传递，导致渲染层无法同步更新。</p><p><strong>3. 性能优化考量</strong></p><p>若每次数据修改都自动触发更新：</p><ul><li><strong>频繁通信开销</strong>：高频数据变更（如循环中修改数据）会导致线程间通信阻塞。</li><li><strong>不必要的渲染</strong>：中间状态的数据变更可能引发多次无效渲染。</li></ul><p>通过 <code>this.setData()</code> 的 <strong>批量合并更新机制</strong>，可优化性能：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合并多次更新，仅触发一次通信和渲染</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等效于</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p><strong>4. 数据一致性与安全性</strong></p><ul><li><strong>脏数据风险</strong>：直接修改 <code>this.data</code> 可能导致逻辑层与渲染层数据不一致。</li><li><strong>状态管理规范</strong>：强制使用 <code>this.setData()</code> 确保数据变更可追踪，符合单向数据流原则。</li></ul></details><h2 id="setdata-底层做了哪些性能优化处理" tabindex="-1">setData 底层做了哪些性能优化处理？ <a class="header-anchor" href="#setdata-底层做了哪些性能优化处理" aria-label="Permalink to &quot;setData 底层做了哪些性能优化处理？&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p><strong>1. 核心优化机制</strong></p><p><strong>(1) 数据通信优化</strong></p><ul><li><p><strong>差异化更新（Diff 算法）</strong><br> 对比新旧数据树，仅序列化并传输变化的部分。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 旧数据：{ a: 1, list: [{ id: 1 }, { id: 2 }] }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;list[1].id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实际传输：{ &#39;list[1].id&#39;: 3 }（而非整个 list 数组）</span></span></code></pre></div><p><strong>优化效果</strong>：减少 60%~80% 的数据传输量。</p></li><li><p><strong>序列化过滤</strong><br> 自动过滤 <code>undefined</code>、<code>Function</code>、<code>Symbol</code> 等不可序列化数据，避免无效通信。</p></li></ul><p><strong>(2) 更新调度优化</strong></p><ul><li><p><strong>批量合并（Batching）</strong><br> 同一事件循环内的多次 <code>setData</code> 调用合并为一次更新：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合并为 { a: 1, b: 2 }，触发单次通信</span></span></code></pre></div><p><strong>优化场景</strong>：高频操作（如动画帧更新、滚动事件）。</p></li><li><p><strong>异步队列与优先级调度</strong><br> 用户交互触发的更新优先级高于数据请求，优先保障交互流畅性。</p></li></ul><p><strong>(3) 渲染层优化</strong></p><ul><li><strong>虚拟 DOM 对比（Virtual DOM Diff）</strong><br> 生成最小化的 DOM 操作指令，避免全量渲染：</li><li><strong>WXS 脚本加速</strong><br> 在渲染层直接处理轻量逻辑（如数据格式化），减少逻辑层通信：<div class="language-wxml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">wxml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;wxs module=&quot;utils&quot;&gt;</span></span>
<span class="line"><span>  function formatPrice(price) { return &#39;¥&#39; + price; }</span></span>
<span class="line"><span>  module.exports = { formatPrice };</span></span>
<span class="line"><span>&lt;/wxs&gt;</span></span>
<span class="line"><span>&lt;view&gt;{{utils.formatPrice(100)}}&lt;/view&gt;</span></span></code></pre></div></li></ul><p><strong>(4) 通信协议优化</strong></p><ul><li><strong>二进制传输（如 Protocol Buffers）</strong><br> 替代 JSON 序列化，体积减少 30%~50%，解析速度提升 2~5 倍。</li><li><strong>通道复用与流量控制</strong><br> 复用 JSBridge 通道，避免频繁建立连接，满负荷时自动排队。</li></ul></details><h2 id="this-setdata-list-largedataarray-有问题吗" tabindex="-1">this.setData({ list: largeDataArray }) 有问题吗？ <a class="header-anchor" href="#this-setdata-list-largedataarray-有问题吗" aria-label="Permalink to &quot;this.setData({ list: largeDataArray }) 有问题吗？&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>在小程序开发中，使用 <code>this.setData({ list: largeDataArray })</code> 传递一个大型数据数组（尤其是包含成千上万条数据时）<strong>确实存在明显的性能问题</strong>。</p><p><strong>1. 核心问题分析</strong></p><p><strong>(1) 数据传输瓶颈</strong></p><ul><li><strong>JSBridge 序列化开销</strong>：数据需从逻辑层（Service）序列化为 JSON 字符串，通过 JSBridge 传递到渲染层（View），数据量越大，序列化和传输时间越长。</li><li><strong>典型耗时</strong>：传输 10,000 条数据（每条 100B）约耗时 <strong>100~300ms</strong>（中低端手机更久）。</li></ul><p><strong>(2) 渲染性能问题</strong></p><ul><li><strong>DOM 节点爆炸</strong>：渲染层需解析数据并生成大量 DOM 节点，导致： <ul><li><strong>内存占用高</strong>：每个 DOM 节点消耗 0.1~1KB 内存，10,000 条数据可能占用 <strong>1~10MB</strong>。</li><li><strong>渲染卡顿</strong>：首次渲染或滚动时出现明显卡顿（帧率低于 30fps）。</li></ul></li></ul><p><strong>(3) 频繁 GC（垃圾回收）</strong></p><ul><li><strong>内存抖动</strong>：频繁创建和销毁大型临时对象，触发 JavaScript 引擎垃圾回收，导致间歇性卡顿。</li></ul><p><strong>2. 优化方案</strong></p><p><strong>(1) 分页加载（懒加载）</strong></p><ul><li><strong>实现方式</strong>：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: { list: [], page: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onReachBottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 滚动到底部加载下一页</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadNextPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  loadNextPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nextPageData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      list: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nextPageData),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      page: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li><li><strong>优点</strong>：减少单次传输数据量，避免内存峰值。</li></ul><p><strong>(2) 虚拟列表（按需渲染）</strong></p><ul><li><strong>原理</strong>：仅渲染可视区域内的元素。</li><li><strong>实现库</strong>：使用 <code>wx-component</code> 或第三方库（如 <code>recycle-view</code>）。<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 微信小程序示例 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">recycle-view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{list}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{item.text}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">recycle-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><strong>优点</strong>：渲染 100 万条数据时，内存占用仅 <strong>1~2MB</strong>。</li></ul><p><strong>(3) 纯数据字段（Pure Data）</strong></p><ul><li><strong>适用场景</strong>：需要存储数据但无需渲染的字段。<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: { pureDataPattern:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">_</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _fullList: largeDataArray, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不触发渲染</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    visibleList: largeDataArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><p><strong>(4) 数据压缩</strong></p><ul><li><p><strong>精简字段</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原始数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rawData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{ id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, desc: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;...&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 10+ 字段 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 优化后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> optimizedData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rawData.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ id, title }))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ list: optimizedData })</span></span></code></pre></div></li><li><p><strong>压缩率</strong>：减少 50%~80% 数据体积。</p></li></ul><p><strong>(5) WebWorker 计算</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Worker 中处理数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWorker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;workers/data-handler.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ action: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;filter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data: largeDataArray })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ list: res.filteredData })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><strong>(6) 原生组件替代</strong></p><ul><li>使用 <code>&lt;canvas&gt;</code> 或 <code>&lt;web-view&gt;</code> 渲染超大数据（如地图、可视化图表）。</li></ul></details><h2 id="小程序登录流程" tabindex="-1">小程序登录流程 <a class="header-anchor" href="#小程序登录流程" aria-label="Permalink to &quot;小程序登录流程&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p><img src="`+r+`" alt="wxlogin"></p><p><strong>说明</strong></p><ul><li>调用 <code>wx.login()</code> 获取 临时登录凭证 <code>code</code>，并回传到开发者服务器。</li><li>调用 <code>auth.code2Session</code> 接口，换取 用户唯一标识 <code>OpenID</code> 、 用户在微信开放平台账号下的唯一标识 <code>UnionID</code>（若当前小程序已绑定到微信开放平台账号） 和 会话密钥 <code>session_key</code>。</li></ul><p>之后开发者服务器可以根据用户标识来生成自定义登录态，用于后续业务逻辑中前后端交互时识别用户身份。</p><p><strong>注意事项</strong></p><ul><li>会话密钥 <code>session_key</code> 是对用户数据进行 加密签名 的密钥。为了应用自身的数据安全，开发者服务器不应该把会话密钥下发到小程序，也不应该对外提供这个密钥。</li><li>临时登录凭证 <code>code</code> 只能使用一次。</li></ul><p><strong>特殊字段</strong></p><ul><li><code>openid</code>：openid 是用来唯一标识用户的一个字符串。在微信小程序中，每个用户的 openid 都是唯一的。通过 openid，小程序可以获取用户的基本信息，如头像、昵称等。</li></ul><blockquote><p>【注意】同一个用户在不同的小程序中拥有不同的openid。因此，在开发小程序时，不能使用openid来进行用户的唯一性判断。</p></blockquote><ul><li><code>unionid</code>：unionid 是在用户绑定同一微信开放平台账号下的多个应用时，用来唯一标识用户的一个字符串。如果用户在多个小程序中使用同一个微信号进行登录授权，那么这些小程序中的 unionid 都是相同的。</li></ul><blockquote><p>【注意】用户的 unionid 只有在用户将多个应用绑定到同一个微信开放平台账号下时才会生成。因此，如果用户没有绑定多个应用，那么小程序将无法获取用户的 unionid。</p></blockquote><ul><li><code>code</code>：code 是用户登录凭证，由微信服务器颁发给小程序。在用户授权登录后，小程序可以通过调用微信登录接口获取用户的 code。然后，通过 code 向微信服务器请求用户的 <code>openid</code> 和 <code>session_key</code> 等信息。</li></ul><blockquote><p>【注意】每个 code 只能使用一次，且有效期为 5 分钟。因此，在使用 code 进行登录时，需要及时将其转换成用户的 openid 和 session_key 等信息，以免出现 code 过期的情况。</p></blockquote></details><h2 id="如何在不发版的情况下实现小程序的-ab-测试" tabindex="-1">如何在不发版的情况下实现小程序的 AB 测试？ <a class="header-anchor" href="#如何在不发版的情况下实现小程序的-ab-测试" aria-label="Permalink to &quot;如何在不发版的情况下实现小程序的 AB 测试？&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>在小程序中实现无需发版的 AB 测试，可通过 <strong>动态配置 + 数据驱动</strong> 的方案完成。</p><ol><li><strong>云端配置管理</strong></li></ol><ul><li><p><strong>创建 AB 测试规则</strong>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例配置（存储在云数据库/Redis）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;experiment_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2023_button_color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;groups&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;group_a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;ratio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 50%流量</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;params&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;button_color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;group_b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;ratio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;params&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;button_color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#00FF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;salt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_id&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 分流依据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>动态更新</strong>：通过管理后台随时调整分组比例和参数</p></li></ul><ol start="2"><li><strong>客户端分组逻辑</strong></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 工具函数：一致性哈希分流</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getABGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">experimentId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;md5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(experimentId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;group_a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;group_b&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 按比例分配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小程序启动时获取配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.cloud.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getABConfig&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().globalData.userId</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> group</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getABGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data.experiment_id, userId)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ abParams: res.data.groups.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> group).params })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ol start="3"><li><strong>界面动态渲染</strong></li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- WXML 根据配置渲染 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;background-color: {{abParams.button_color}};&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;立即购买&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="4"><li><strong>数据埋点上报</strong></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 点击事件处理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reportAnalytics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button_click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    experiment_id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2023_button_color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    group: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.abGroup,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    button_color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.abParams.button_color</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="5"><li><strong>数据分析阶段</strong></li></ol><ul><li><p><strong>指标定义</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例：计算转化率差异</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  group,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total_users,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(is_converted) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conversion_rate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ab_test_events</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  experiment_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2023_button_color&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  group;</span></span></code></pre></div></li><li><p><strong>统计显著性检验</strong>：使用 T 检验或卡方检验验证结果可靠性</p></li></ul><p><strong>关键技术细节</strong></p><ol><li><strong>流量分配算法</strong></li></ol><ul><li><strong>分层采样</strong>：不同实验独立分流（避免流量干扰）</li><li><strong>Sticky Bucket</strong>：确保用户始终处于同一分组<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本地缓存分组结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> storedGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStorageSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(experimentId)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (storedGroup) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> storedGroup</span></span></code></pre></div></li></ul><ol start="2"><li><strong>动态更新策略</strong></li></ol><ul><li><strong>定时轮询</strong>：每 5 分钟检查配置更新</li><li><strong>WebSocket 推送</strong>：实时生效新配置</li></ul><ol start="3"><li><strong>灰度发布控制</strong></li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 云配置示例：分阶段放量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rollout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    percentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10%</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    start_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025-01-01</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    percentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">100%</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    start_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025-01-03</span></span></code></pre></div></details><h2 id="小程序的增量更新" tabindex="-1">小程序的增量更新 <a class="header-anchor" href="#小程序的增量更新" aria-label="Permalink to &quot;小程序的增量更新&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>小程序的增量更新机制主要依赖于小程序平台的设计</p><ul><li>当小程序开发者发布新版本时，小程序平台会比较新旧两个版本的差异，并生成一个包含差异信息的补丁文件。</li><li>然后，当用户打开小程序时，小程序平台会检查用户设备上的小程序版本。</li><li>如果发现用户的版本落后于服务器上的版本，那么就会下载补丁文件，而不是整个新版本的代码包。</li><li>接着，小程序平台会应用补丁文件，将用户设备上的小程序更新到新版本。</li></ul></details><h2 id="小程序性能优化" tabindex="-1">小程序性能优化 <a class="header-anchor" href="#小程序性能优化" aria-label="Permalink to &quot;小程序性能优化&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>微信 IDE 的小程序评分功能位于调试器 -&gt; Audits 面板中</p><p>小程序性能优化的具体维度：</p><ol><li>避免过大的 WXML 节点数目</li><li>避免执行脚本的耗时过长的情况</li><li>避免首屏时间太长的情况</li><li>避免渲染界面的耗时过长的情况</li><li>对网络请求做必要的缓存以避免多余的请求</li><li>所有请求的耗时不应太久</li><li>避免 setData 的调用过于频繁</li><li>避免 setData 的数据过大</li><li>避免短时间内发起太多的图片请求</li><li>避免短时间内发起太多的请求</li></ol></details><h2 id="分包加载" tabindex="-1">分包加载 <a class="header-anchor" href="#分包加载" aria-label="Permalink to &quot;分包加载&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p>小程序分包加载是一种优化技术，用于解决主包体积过大导致的首次加载性能问题。通过将非核心功能模块拆分为独立分包，实现按需加载和动态加载。</p><p>一、分包加载核心概念</p><ol><li><strong>包类型</strong></li></ol><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>说明</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td><strong>主包</strong></td><td>包含启动页面、核心公共组件和基础库</td><td>用户首次打开小程序时必须下载</td></tr><tr><td><strong>普通分包</strong></td><td>依赖主包的功能模块，按需加载</td><td>可访问主包资源</td></tr><tr><td><strong>独立分包</strong></td><td>不依赖主包的完整功能模块，可独立运行</td><td>无法访问主包资源</td></tr></tbody></table><ol start="2"><li><strong>体积限制</strong></li></ol><table tabindex="0"><thead><tr><th><strong>包类型</strong></th><th><strong>最大体积</strong></th><th><strong>总包体积限制</strong></th></tr></thead><tbody><tr><td>主包</td><td>2MB</td><td>20MB (所有分包总和)</td></tr><tr><td>单个普通分包</td><td>2MB</td><td></td></tr><tr><td>单个独立分包</td><td>2MB</td><td></td></tr></tbody></table><p>二、分包配置实现</p><ol><li><strong>目录结构</strong></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 主包入口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 分包配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subpackages</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 分包目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user-center</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 普通分包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shop</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # 独立分包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 独立分包入口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> common</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 公共代码（主包）</span></span></code></pre></div><ol start="2"><li><strong>app.json 配置</strong></li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pages/index/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主包页面</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;subpackages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;subpackages/user-center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;settings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;independent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 普通分包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;subpackages/shop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;independent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 独立分包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;preloadRule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pages/index/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;network&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 预加载普通分包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>三、分包加载策略</p><ol><li><strong>按需加载</strong></li></ol><ul><li><strong>普通分包</strong>：当用户首次访问分包内页面时触发下载</li><li><strong>独立分包</strong>：通过 <code>wx.navigateTo</code> 指定 <code>isIndependent</code> 参数加载<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/subpackages/shop/pages/home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  isIndependent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><ol start="2"><li><strong>预加载优化</strong></li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// app.json 预加载配置</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preloadRule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages/index/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 预加载分包名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;network&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wifi&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 仅WiFi下预加载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>策略建议</strong>：</p><ul><li>预加载不超过 <strong>2个</strong> 分包</li><li>仅预加载用户可能访问的高频分包</li></ul><ol start="3"><li><strong>懒加载配合</strong></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 点击事件触发加载</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onTapShop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../../subpackages/shop/shop.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态导入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigateTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/subpackages/shop/pages/home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><h2 id="列举几种异常监控指标" tabindex="-1">列举几种异常监控指标 <a class="header-anchor" href="#列举几种异常监控指标" aria-label="Permalink to &quot;列举几种异常监控指标&quot;">​</a></h2><p>答案整理中...</p><h2 id="冷启动与热启动的区别" tabindex="-1">冷启动与热启动的区别 <a class="header-anchor" href="#冷启动与热启动的区别" aria-label="Permalink to &quot;冷启动与热启动的区别&quot;">​</a></h2><p>答案整理中...</p><h2 id="组件通信方案" tabindex="-1">组件通信方案 <a class="header-anchor" href="#组件通信方案" aria-label="Permalink to &quot;组件通信方案&quot;">​</a></h2><p>答案整理中...</p><h2 id="wx-if-与-hidden-的区别" tabindex="-1">wx:if 与 hidden 的区别 <a class="header-anchor" href="#wx-if-与-hidden-的区别" aria-label="Permalink to &quot;wx:if 与 hidden 的区别&quot;">​</a></h2><p>参考答案</p>`,36)),s("details",g,[i[10]||(i[10]=t("<summary>Details</summary><p>小程序中 <code>wx:if</code> 与 <code>hidden</code> 的区别主要体现在 <strong>渲染机制</strong>、<strong>性能影响</strong> 和 <strong>使用场景</strong> 上。</p><p><strong>1. 核心区别</strong></p>",3)),s("table",E,[i[9]||(i[9]=s("thead",null,[s("tr",null,[s("th",null,[s("strong",null,"特性")]),s("th",null,[s("strong",null,"wx:if")]),s("th",null,[s("strong",null,"hidden")])])],-1)),s("tbody",null,[i[4]||(i[4]=s("tr",null,[s("td",null,[s("strong",null,"渲染机制")]),s("td",null,[a("条件为 "),s("code",null,"true"),a(" 时渲染组件，否则 "),s("strong",null,"不渲染")]),s("td",null,[a("始终渲染组件，通过 "),s("code",null,"display: none"),a(),s("strong",null,"隐藏")])],-1)),i[5]||(i[5]=s("tr",null,[s("td",null,[s("strong",null,"DOM 结构")]),s("td",null,[a("条件不满足时 "),s("strong",null,"移除组件节点")]),s("td",null,[a("组件节点 "),s("strong",null,"始终存在"),a("，仅样式隐藏")])],-1)),i[6]||(i[6]=s("tr",null,[s("td",null,[s("strong",null,"生命周期")]),s("td",null,[a("切换时触发 "),s("code",null,"attached"),a("/"),s("code",null,"detached"),a(" 生命周期")]),s("td",null,"无生命周期触发，仅样式变化")],-1)),i[7]||(i[7]=s("tr",null,[s("td",null,[s("strong",null,"状态保留")]),s("td",null,[a("条件切换后 "),s("strong",null,"状态重置"),a("（如输入框内容清空）")]),s("td",null,[a("隐藏时 "),s("strong",null,"保留状态"),a("（如输入框内容不变）")])],-1)),i[8]||(i[8]=s("tr",null,[s("td",null,[s("strong",null,"性能开销")]),s("td",null,[a("适合 "),s("strong",null,"低频切换"),a("（减少初始渲染节点）")]),s("td",null,[a("适合 "),s("strong",null,"高频切换"),a("（避免重复创建/销毁节点）")])],-1)),s("tr",null,[i[2]||(i[2]=s("td",null,[s("strong",null,"使用语法")],-1)),i[3]||(i[3]=s("td",null,[a("支持 "),s("code",null,"wx:if"),a("/"),s("code",null,"wx:elif"),a("/"),s("code",null,"wx:else"),a(" 链式条件判断")],-1)),s("td",null,[i[0]||(i[0]=a("仅接受布尔值（")),s("code",null,'hidden="'+p(n.condition)+'"',1),i[1]||(i[1]=a("）"))])])])]),i[11]||(i[11]=t(`<p><strong>2. 使用场景对比</strong></p><p><strong>(1) 推荐使用 <code>wx:if</code> 的场景</strong></p><ul><li><strong>初始不渲染</strong>：页面加载时不需要显示的组件（减少首屏节点数）。</li><li><strong>复杂条件判断</strong>：需要多分支逻辑（如 <code>wx:elif</code>）。<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{score &gt;= 90}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;优秀&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{score &gt;= 60}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;及格&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wx:else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;不及格&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><strong>大数据量组件</strong>：如长列表，避免隐藏时占用内存。</li></ul><p><strong>(2) 推荐使用 <code>hidden</code> 的场景</strong></p><ul><li><strong>高频切换</strong>：如 Tab 切换、模态框显示隐藏。<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{!showPanel}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;控制面板&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><strong>状态保留</strong>：如表单输入中途需要临时隐藏。</li><li><strong>动画控制</strong>：通过 CSS 过渡实现显示/隐藏动画。</li></ul><p><strong>3. 性能优化指南</strong></p><table tabindex="0"><thead><tr><th><strong>场景</strong></th><th><strong>选择方案</strong></th><th><strong>理由</strong></th></tr></thead><tbody><tr><td>首屏隐藏的大组件</td><td><code>wx:if</code></td><td>减少初始渲染节点，提升加载速度</td></tr><tr><td>频繁切换的组件</td><td><code>hidden</code></td><td>避免重复创建/销毁，减少性能开销</td></tr><tr><td>需要保留状态的表单</td><td><code>hidden</code></td><td>隐藏时保留输入内容</td></tr><tr><td>多条件分支渲染</td><td><code>wx:if</code></td><td>语法支持更灵活</td></tr></tbody></table><p><strong>4. 底层原理</strong></p><ul><li><p><strong>wx:if</strong>：<br> 通过 Virtual DOM 动态添加/删除组件节点，触发完整生命周期。</p></li><li><p><strong>hidden</strong>：<br> 仅修改 CSS 的 <code>display</code> 属性，不涉及节点操作。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 伪代码实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">component.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  display: condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;block&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul>`,9))]),i[13]||(i[13]=t('<h2 id="taro-uni-app-跨端原理对比" tabindex="-1">Taro/Uni-app 跨端原理对比 <a class="header-anchor" href="#taro-uni-app-跨端原理对比" aria-label="Permalink to &quot;Taro/Uni-app 跨端原理对比&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><table tabindex="0"><thead><tr><th>框架</th><th>技术栈</th><th>微信小程序</th><th>H5</th><th>App</th><th>支付宝/百度小程序</th></tr></thead><tbody><tr><td>Taro</td><td>React/Vue</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>uni-app</td><td>Vue</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>WePY</td><td>Vue</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>mpvue</td><td>Vue</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr></tbody></table><p><strong>1. Taro</strong></p><p>京东凹凸实验室</p><p><strong>优缺点</strong></p><ul><li>Taro 在 App 端使用的是 React Native 的渲染引擎，原生的 UI 体验较好，但据说在实时交互和高响应要求的操作方面不是很理想。 微信小程序方面，结合度感觉没有那么顺滑，有一些常见功能还是需要自己去封装。</li><li>另外就是开发环境难度稍高，需要自己去搭建 iOS 和 Android 的环境，对于想要一处开发到处应用的傻瓜式操作来讲，稍显繁琐。</li><li>但 Taro 3 的出现，支持了 React 和 Vue 两种 DSL，适合的人群会更多一点，并且对快应用的支持也更好。</li></ul><p><strong>2. uni-app</strong></p><p>DCloud</p><p><strong>优缺点</strong></p><ul><li>uni-app 在 App 渲染方面，提供了原生渲染引擎和小程序引擎的双选方案，加上自身的一些技术优化（renderjs），对于高性能和响应要求的场景展现得更为流畅。</li><li>另外它整体的开发配套流程也做得很容易上手。比如有丰富的插件市场，使用简单，支持大量常用场景。</li><li>还比如它的定制 IDE——HBuilder，提供了强大的整合能力。在用 HBuilder 之前，我心想：“还要多装一个编辑器麻烦，再好用能有 VS Code 好用？”用过之后：“真香！”</li><li>虽然用惯了 VS Code 对比起来还是有一些痛点没有解决，但是对于跨平台开发太友好了，其他缺点都可以忍受。HBuilder 里支持直接跳转到微信开发者工具调试，支持真机实时预览，支持直接打包小程序和App，零门槛上手。</li></ul></details><h2 id="微信公众号-h5-微信-jssdk" tabindex="-1">微信公众号 H5 ，微信 JSSDK <a class="header-anchor" href="#微信公众号-h5-微信-jssdk" aria-label="Permalink to &quot;微信公众号 H5 ，微信 JSSDK&quot;">​</a></h2><p>答案整理中...</p>',5))])}const b=l(d,[["render",o]]);export{B as __pageData,b as default};
