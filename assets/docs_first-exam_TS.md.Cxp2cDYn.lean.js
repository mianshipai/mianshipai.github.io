import{_ as s,c as i,a0 as e,o as t}from"./chunks/framework.P9qPzDnn.js";const c=JSON.parse('{"title":"Typescript 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"docs/first-exam/TS.md","filePath":"docs/first-exam/TS.md"}'),n={name:"docs/first-exam/TS.md"};function l(h,a,p,r,o,d){return t(),i("div",null,a[0]||(a[0]=[e('<h1 id="typescript-面试题" tabindex="-1">Typescript 面试题 <a class="header-anchor" href="#typescript-面试题" aria-label="Permalink to &quot;Typescript 面试题&quot;">​</a></h1><p>Typescript 已经全面普及，尤其大厂大型项目，前端熟悉 Typescript 是标配。</p><h2 id="ts-优缺点-使用场景" tabindex="-1">TS 优缺点，使用场景 <a class="header-anchor" href="#ts-优缺点-使用场景" aria-label="Permalink to &quot;TS 优缺点，使用场景&quot;">​</a></h2><h2 id="ts-基础类型有哪些" tabindex="-1">TS 基础类型有哪些 <a class="header-anchor" href="#ts-基础类型有哪些" aria-label="Permalink to &quot;TS 基础类型有哪些&quot;">​</a></h2><p>enum tuple</p><h2 id="数组-array-和元组-tuple-的区别是什么" tabindex="-1">数组 Array 和元组 Tuple 的区别是什么 <a class="header-anchor" href="#数组-array-和元组-tuple-的区别是什么" aria-label="Permalink to &quot;数组 Array 和元组 Tuple 的区别是什么&quot;">​</a></h2><h2 id="枚举-enum-是什么-有什么使用场景" tabindex="-1">枚举 enum 是什么？有什么使用场景？ <a class="header-anchor" href="#枚举-enum-是什么-有什么使用场景" aria-label="Permalink to &quot;枚举 enum 是什么？有什么使用场景？&quot;">​</a></h2><h2 id="keyof-和-typeof-有什么区别" tabindex="-1">keyof 和 typeof 有什么区别？ <a class="header-anchor" href="#keyof-和-typeof-有什么区别" aria-label="Permalink to &quot;keyof 和 typeof 有什么区别？&quot;">​</a></h2><h2 id="any-void-never-unknown-有什么区别" tabindex="-1">any void never unknown 有什么区别 <a class="header-anchor" href="#any-void-never-unknown-有什么区别" aria-label="Permalink to &quot;any void never unknown 有什么区别&quot;">​</a></h2><h2 id="unknown-和-any-区别" tabindex="-1">unknown 和 any 区别 <a class="header-anchor" href="#unknown-和-any-区别" aria-label="Permalink to &quot;unknown 和 any 区别&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><p><code>unknown</code> 是更安全的 <code>any</code> ，如下代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;x&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不报错</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;y&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.toString() // 报错</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;(b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不报错</span></span></code></pre></div></details><h2 id="ts-访问修饰符-public-protected-private-有什么作用" tabindex="-1">TS 访问修饰符 public protected private 有什么作用 <a class="header-anchor" href="#ts-访问修饰符-public-protected-private-有什么作用" aria-label="Permalink to &quot;TS 访问修饰符 public protected private 有什么作用&quot;">​</a></h2><h2 id="type-和-interface-共同和区别-如何选择" tabindex="-1">type 和 interface 共同和区别，如何选择 <a class="header-anchor" href="#type-和-interface-共同和区别-如何选择" aria-label="Permalink to &quot;type 和 interface 共同和区别，如何选择&quot;">​</a></h2><p>共同点</p><ul><li>都能描述一个对象结构</li><li>都能被 class 实现</li><li>都能被扩展</li></ul><p>区别</p><ul><li>type 可以声明基础类型</li><li>type 有联合类型和交差类型</li><li>type 可以被 typeof 赋值</li></ul><p>如何选择... todo...</p><h2 id="什么是泛型-如何使用它" tabindex="-1">什么是泛型，如何使用它？ <a class="header-anchor" href="#什么是泛型-如何使用它" aria-label="Permalink to &quot;什么是泛型，如何使用它？&quot;">​</a></h2><h2 id="什么是交叉类型和联合类型" tabindex="-1">什么是交叉类型和联合类型 <a class="header-anchor" href="#什么是交叉类型和联合类型" aria-label="Permalink to &quot;什么是交叉类型和联合类型&quot;">​</a></h2><p>交叉类型 <code>T1 &amp; T2</code></p><p>联合类型 <code>T1 | T2</code></p><h2 id="是否用过工具类型" tabindex="-1">是否用过工具类型 <a class="header-anchor" href="#是否用过工具类型" aria-label="Permalink to &quot;是否用过工具类型&quot;">​</a></h2><p>Partial Required Omit ReadOnly 等</p><h2 id="ts-这些符号-分别什么意思" tabindex="-1">TS 这些符号 <code>?</code> <code>?.</code> <code>??</code> <code>!</code> <code>&amp;</code> <code>_</code> <code>#</code> 分别什么意思 <a class="header-anchor" href="#ts-这些符号-分别什么意思" aria-label="Permalink to &quot;TS 这些符号 `?` `?.` `??` `!` `&amp;` `_` `#` 分别什么意思&quot;">​</a></h2><h2 id="什么是抽象类-abstract-class" tabindex="-1">什么是抽象类 abstract class <a class="header-anchor" href="#什么是抽象类-abstract-class" aria-label="Permalink to &quot;什么是抽象类 abstract class&quot;">​</a></h2><h2 id="什么是命名空间-namespace-和模块-module" tabindex="-1">什么是命名空间（Namespace）和模块（Module） <a class="header-anchor" href="#什么是命名空间-namespace-和模块-module" aria-label="Permalink to &quot;什么是命名空间（Namespace）和模块（Module）&quot;">​</a></h2><h2 id="如何扩展-window-属性-如何定义第三方模块的类型" tabindex="-1">如何扩展 window 属性，如何定义第三方模块的类型 <a class="header-anchor" href="#如何扩展-window-属性-如何定义第三方模块的类型" aria-label="Permalink to &quot;如何扩展 window 属性，如何定义第三方模块的类型&quot;">​</a></h2><p>参考答案</p><details class="details custom-block"><summary>Details</summary><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;aa&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.test)</span></span></code></pre></div></details><h2 id="是否有过真实的-typescript-开发经验-讲一下你的使用体验" tabindex="-1">是否有过真实的 Typescript 开发经验，讲一下你的使用体验 <a class="header-anchor" href="#是否有过真实的-typescript-开发经验-讲一下你的使用体验" aria-label="Permalink to &quot;是否有过真实的 Typescript 开发经验，讲一下你的使用体验&quot;">​</a></h2>',32)]))}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
